-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Airline where

import DA.Assert
import DA.List
import DA.TextMap as TM

template FlightInvite
  with
    ticket : Ticket
  where
    signatory ticket.airline
    observer ticket.passenger

    choice Accept_Invite : (ContractId Ticket, ContractId Flight)
      with
        flightCid : ContractId Flight
      controller ticket.passenger
      do
        flight <- fetch flightCid
        ticket.flightNumber === flight.flightNumber
        ticket.airline === flight.airline

        flightCid <- exercise flightCid Onboard with
          passenger = ticket.passenger
        ticketCid <- create ticket

        return (ticketCid, flightCid)


template Ticket
  with
    ticketRef : Text
    flightNumber : Text
    airline : Party
    passenger : Party
    seatNumber : Optional Text
    seatChoice : Bool
  where
    signatory airline, passenger

    choice CheckIn : (ContractId Ticket, ContractId Flight)
      with
        flightCid : ContractId Flight
        seat : Text
      controller if seatChoice then passenger else airline
      do
        flight <- fetch flightCid
        None === seatNumber
        flight.flightNumber === flightNumber
        flight.airline === airline
        assert (elem seat flight.seats)
        newTicketCid <- create this with seatNumber = Some seat
        newFlightCid <- exercise flightCid AssignSeat with
          passenger; seat; ticketRef
        return (newTicketCid, newFlightCid)

template Flight
  with
    seats : [Text]
    allocation : TextMap Text
    flightNumber : Text
    airline : Party
    invitedPassengers : [Party]
    passengers : [Party]
  where
    signatory airline, passengers
    observer invitedPassengers

    choice AssignSeat : ContractId Flight
      with
        passenger : Party
        ticketRef : Text
        seat : Text
      controller [passenger, airline]
      do
        None === TM.lookup seat allocation

        create this with
          allocation = insert seat ticketRef allocation

    choice Onboard : ContractId Flight
      with
        passenger : Party
      controller [airline, passenger]
      do
        assert (passenger `elem` invitedPassengers)
        create this with passengers = passenger :: passengers

    choice TakeOff : ()
      controller airline
      do
        length passengers === TM.size allocation
        return ()

dajet1 = scenario do
  da <- getParty "DA"
  passengers <- mapA getParty ["P1", "P2", "P3", "P4", "P5"]
  let
    flightNumber = "DA Force One"
    seatChoices = [False, False, True, True, True, True]
    seats =
      [ "1A"
      , "1B"
      , "2A"
      , "2B"
      , "3A"
      , "3B"]
    tickets = map
      (\(seq, passenger, seatChoice) ->
        Ticket with
          ticketRef = show seq
          flightNumber
          airline = da
          passenger
          seatNumber = None
          seatChoice
      )
      (zip3 [1..5] passengers seatChoices)

  debug tickets
{- output:
  [
    Ticket {
      ticketRef = "1",
      flightNumber = "DA Force One",
      airline = 'DA',
      passenger = 'P1',
      seatNumber = None,
      seatChoice = False},
    Ticket {ticketRef = "2", flightNumber = "DA Force One", airline = 'DA', passenger = 'P2', seatNumber = None, seatChoice = False},
    Ticket {ticketRef = "3", flightNumber = "DA Force One", airline = 'DA', passenger = 'P3', seatNumber = None, seatChoice = True},
    Ticket {ticketRef = "4", flightNumber = "DA Force One", airline = 'DA', passenger = 'P4', seatNumber = None, seatChoice = True},
    Ticket {ticketRef = "5", flightNumber = "DA Force One", airline = 'DA', passenger = 'P5', seatNumber = None, seatChoice = True}]
-}

  submit da do
    inviteCids <- mapA (\ticket -> create FlightInvite with ticket) tickets
    flightCid <- create Flight with
      seats
      allocation = TM.empty
      flightNumber
      airline = da
      invitedPassengers = passengers
      passengers = []
    return (inviteCids, flightCid)

dajet2 = scenario do
  da <- getParty "DA"
  -- p5 is missing!
  [p1, p2, p3, p4] <- mapA getParty ["P1", "P2", "P3", "P4"]

  ([i1, i2, i3, i4, i5], flightCid) <- dajet1

  (t1, flightCid) <- submit p1 do exercise i1 Accept_Invite with flightCid
  (t2, flightCid) <- submit p2 do exercise i2 Accept_Invite with flightCid
  (t3, flightCid) <- submit p3 do exercise i3 Accept_Invite with flightCid
  (t4, flightCid) <- submit p4 do exercise i4 Accept_Invite with flightCid

  return ([i1,i2,i3,i4,i5], [t1,t2,t3,t4], flightCid)

dajet3 = scenario do
  da <- getParty "DA"
  p5 <- getParty "P5"

  (inviteCids, [t1, t2, t3, t4], flightCid) <- dajet2

  let inviteCid = last inviteCids

  (t5, flightCid) <- submit p5 do
    exercise inviteCid Accept_Invite with flightCid

  return ([t1, t2, t3, t4, t5], flightCid)

dajet4 = scenario do
  da <- getParty "DA"
  [p1, p2] <- mapA getParty ["P1", "P2"]

  ([t1, t2, t3, t4, t5], flightCid) <- dajet3

  submitMustFail da do exercise flightCid TakeOff
  submitMustFail p1 do
    exercise t1 CheckIn with
      flightCid
      seat = "1A"
  submitMustFail da do
    exercise t1 CheckIn with
      flightCid
      seat = "123ABC"
  submitMustFail p2 do
    exercise t3 CheckIn with
      flightCid
      seat = "1A"

  (_, flightCid) <- submit da do
    exercise t1 CheckIn with
      flightCid
      seat = "3A"

  return ([t2, t3, t4, t5], flightCid)

dajet5 = scenario do
  da <- getParty "DA"
  [p3, p4] <- mapA getParty ["P3", "P4"]

  ([t2, t3, t4, t5], flightCid) <- dajet4

  submitMustFail da do
    exercise t2 CheckIn with
      flightCid
      seat = "3A"

  (_, flightCid) <- submit da do
    exercise t2 CheckIn with
      flightCid
      seat = "3B"

  submitMustFail da do
    exercise t3 CheckIn with
      flightCid
      seat = "2A"

  (_, flightCid) <- submit p3 do
    exercise t3 CheckIn with
      flightCid
      seat = "2A"

  (_, flightCid) <- submit p4 do
    exercise t4 CheckIn with
      flightCid
      seat = "2B"

  return (t5, flightCid)

dajet6 = scenario do
  da <- getParty "DA"
  p5 <- getParty "P5"

  (t5, flightCid) <- dajet5

  (_, flightCid) <- submit p5 do
    exercise t5 CheckIn with
      flightCid
      seat = "1A"

  return flightCid

dajet = scenario do
  da <- getParty "DA"

  flightCid <- dajet6

  submit da do exercise flightCid TakeOff
